name: Build Microsoft Edge Package for macOS

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  edge_macos:
    runs-on: macos-latest # This job runs on a macOS runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Show current working directory and recipes folder for debug
        # Display current directory and contents of the 'recipes' folder for debugging purposes.
        run: |
          echo "Current working directory:"
          pwd
          echo "Repository root contents:"
          ls -la
          echo "Recipes folder contents:"
          ls -la ./recipes || true # Add || true to prevent failure if folder is empty or not found

      - name: Clean AutoPkg cached recipe repositories
        # Remove old AutoPkg recipe caches to ensure a clean slate and avoid conflicts.
        run: |
          echo "Removing old AutoPkg recipe caches..."
          rm -rf ~/Library/AutoPkg/RecipeRepos/* || true # Use || true to prevent failure if directory doesn't exist
          echo "Cache cleanup done."

      - name: Download and install AutoPkg
        # Download the AutoPkg installer package.
        run: |
          echo "Downloading AutoPkg installer..."
          curl -L -o autopkg.pkg https://github.com/autopkg/autopkg/releases/download/v2.7.5/AutoPkg-2.7.5.pkg

          if [ ! -f autopkg.pkg ]; then
            echo "Error: AutoPkg installer package missing!"
            exit 1
          fi

          # Verify the downloaded file size to ensure it's not a partial download or error page.
          filesize=$(stat -f%z autopkg.pkg)
          echo "Installer package size: $filesize bytes"

          if [ "$filesize" -lt 100000 ]; then # Minimum expected size for a valid installer
            echo "Error: Installer package is suspiciously small; aborting."
            exit 1
          fi

          # Install AutoPkg silently.
          echo "Installing AutoPkg..."
          sudo installer -pkg autopkg.pkg -target /
          echo "AutoPkg version:"
          autopkg version

      - name: Add AutoPkg recipe repositories
        # Add the official AutoPkg recipes repository, which contains the MSEdge.download.recipe.
        run: |
          echo "Adding official AutoPkg recipes repo..."
          autopkg repo-add https://github.com/autopkg/recipes.git
          echo "Listing all recipes to confirm..."
          autopkg list-recipes

      - name: Set environment variable for custom processors (if any)
        # Set an environment variable if you have custom processors in your 'processors' folder.
        run: |
          echo "AUTO_PKG_PROCESSOR_PATHS=$(pwd)/processors" >> $GITHUB_ENV

      - name: Run MSEdge.download.recipe and Extract Path
        id: run_and_extract_path # ID to reference outputs if needed
        run: |
          # Execute the MSEdge.download.recipe and capture its entire verbose output
          AUTOPKG_OUTPUT=$(autopkg run MSEdge.download.recipe --verbose 2>&1)
          echo "$AUTOPKG_OUTPUT" # Print full output for debugging

          # Extract the download path from the AutoPkg output more reliably.
          # We look for "Download Path", take the next TWO lines, and then the last one (which is the path).
          EDGE_INSTALLER_PATH=$(echo "$AUTOPKG_OUTPUT" | grep -A 2 "Download Path" | tail -n 1 | xargs)

          if [ -z "$EDGE_INSTALLER_PATH" ]; then
            echo "::error ::Could not extract Microsoft Edge PKG installer path from AutoPkg output."
            echo "Full AutoPkg output for debugging:"
            echo "$AUTOPKG_OUTPUT" # Re-print full output if extraction fails
            exit 1
          fi

          echo "Found Microsoft Edge Installer at: $EDGE_INSTALLER_PATH"
          echo "EDGE_INSTALLER_PATH=$EDGE_INSTALLER_PATH" >> $GITHUB_ENV # Set as env var for subsequent steps

      - name: Extract Bundle ID and Version for Intune
        id: extract_info
        run: |
          # Define temporary directories for package expansion and payload extraction
          PKG_EXPAND_DIR="/private/tmp/EdgePkgExpand_$(uuidgen)"
          APP_EXTRACT_DIR="/private/tmp/EdgeAppExtract_$(uuidgen)"
          
          # Pre-emptively clean the expansion directory before use
          echo "Cleaning any existing PKG expansion directory: $PKG_EXPAND_DIR"
          sudo rm -rf "$PKG_EXPAND_DIR" || true # Use || true to prevent failure if it doesn't exist
          
          echo "Expanding PKG to: $PKG_EXPAND_DIR"
          mkdir -p "$PKG_EXPAND_DIR"
          # Expand the downloaded .pkg file
          pkgutil --expand "${{ env.EDGE_INSTALLER_PATH }}" "$PKG_EXPAND_DIR" || { echo "::error ::Failed to expand PKG."; exit 1; }

          # Find the Payload file within the expanded package structure
          # Microsoft Edge PKG is a distribution package, so Payload is often nested (e.g., 'MicrosoftEdgeBeta.pkg/Payload').
          PAYLOAD_FILE=$(find "$PKG_EXPAND_DIR" -name "Payload" -type f | head -n 1)

          if [ -z "$PAYLOAD_FILE" ]; then
            echo "::error ::Payload file not found in expanded PKG. Contents of $PKG_EXPAND_DIR for debugging:"
            ls -laR "$PKG_EXPAND_DIR" || true
            exit 1
          fi
          echo "Found Payload at: $PAYLOAD_FILE"

          echo "Extracting app from Payload to: $APP_EXTRACT_DIR"
          mkdir -p "$APP_EXTRACT_DIR"
          # Decompress the Payload (gzip -d) and extract its contents (cpio -idmv)
          (cd "$APP_EXTRACT_DIR" && cat "$PAYLOAD_FILE" | gzip -d | cpio -idmv) || { echo "::error ::Failed to extract Payload."; exit 1; }

          # Find the Microsoft Edge.app bundle within the extracted contents
          INSTALLED_APP_PATH=$(find "$APP_EXTRACT_DIR" -type d -name "Microsoft Edge.app" | head -n 1)

          if [ -z "$INSTALLED_APP_PATH" ]; then
            echo "::error ::Microsoft Edge.app not found in extracted payload at $APP_EXTRACT_DIR."
            ls -laR "$APP_EXTRACT_DIR" || true # Debug contents of extracted dir
            exit 1
          fi
          echo "Found Microsoft Edge.app at: $INSTALLED_APP_PATH"

          INFO_PLIST_PATH="$INSTALLED_APP_PATH/Contents/Info.plist"
          
          if [ ! -f "$INFO_PLIST_PATH" ]; then
            echo "::error ::Info.plist not found for Microsoft Edge.app at $INFO_PLIST_PATH"
            exit 1
          fi

          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$INFO_PLIST_PATH")
          APP_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$INFO_PLIST_PATH")

          echo "Extracted Bundle ID: $BUNDLE_ID"
          echo "Extracted App Version: $APP_VERSION"

          # Create a file with the Intune relevant information
          INFO_FILE="microsoft_edge_intune_info_macos.txt"
          echo "--- Microsoft Edge (macOS) Intune Details ---" > "$INFO_FILE"
          echo "Bundle ID (for Detection Rules): $BUNDLE_ID" >> "$INFO_FILE"
          echo "Version (for Display/Detection): $APP_VERSION" >> "$INFO_FILE"
          echo "" >> "$INFO_FILE"
          echo "Install Command: sudo installer -pkg <package_name>.pkg -target /" >> "$INFO_FILE"
          echo "Uninstall Command: /bin/rm -rf '/Applications/Microsoft Edge.app'" >> "$INFO_FILE"
          echo "---------------------------------------------" >> "$INFO_FILE"

          echo "Intune info saved to $INFO_FILE"
          ls -la "$INFO_FILE" # Show the created file

          # Clean up temporary directories
          echo "Cleaning up temporary directories: $PKG_EXPAND_DIR and $APP_EXTRACT_DIR"
          sudo rm -rf "$PKG_EXPAND_DIR" "$APP_EXTRACT_DIR"

          # Make these values available as outputs for the job
          echo "INFO_FILE=$INFO_FILE" >> $GITHUB_OUTPUT

      - name: Upload Microsoft Edge PKG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: microsoft-edge-macos-pkg
          path: ${{ env.EDGE_INSTALLER_PATH }} # Path to the downloaded PKG installer
          retention-days: 7

      - name: Upload Intune info file for macOS Edge as artifact
        uses: actions/upload-artifact@v4
        with:
          name: microsoft-edge-macos-intune-info
          path: ${{ steps.extract_info.outputs.INFO_FILE }}
          retention-days: 7
