name: Build GitHub Desktop Package (Windows)

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  github_desktop:
    runs-on: windows-latest # This job runs on a Windows runner

    steps:
      - name: Create directories
        run: |
          New-Item -Path input -ItemType Directory -Force
          New-Item -Path output -ItemType Directory -Force

      - name: Download latest GitHub Desktop for Windows installer
        shell: pwsh
        run: |
          # Fetch the latest stable release from the official GitHub Desktop GitHub releases API.
          $apiUrl = "https://api.github.com/repos/desktop/desktop/releases/latest"
          Write-Host "Fetching latest release info from: $apiUrl"
          $response = Invoke-RestMethod -Uri $apiUrl -ErrorAction Stop
          
          # Find the appropriate 64-bit Windows installer (.exe, non-portable)
          $asset = $response.assets | Where-Object { $_.name -like "*Setup*.exe" -and $_.name -notlike "*portable*" -and $_.name -notlike "*ia32*" } | Select-Object -First 1

          if ($null -eq $asset) {
              Write-Error "Could not find a suitable 64-bit GitHub Desktop installer asset from the API response."
              Write-Host "Available assets:"
              $response.assets | ForEach-Object { Write-Host ("  " + $_.name) }
              exit 1
          }
          
          $downloadUrl = $asset.browser_download_url
          $installerFileName = $asset.name # Use the actual filename from the asset
          
          Write-Host "Downloading GitHub Desktop from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile "input\$installerFileName" -ErrorAction Stop
          
          Write-Host "Downloaded installer: $installerFileName"
          echo "GH_DESKTOP_INSTALLER_FILENAME=$installerFileName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Get GitHub Desktop installer version and set as environment variable
        shell: pwsh
        run: |
          $installerPath = "input\$env:GH_DESKTOP_INSTALLER_FILENAME"
          if (-not (Test-Path $installerPath)) {
              Write-Error "GitHubDesktop installer not found at $installerPath."
              exit 1
          }
          # GitHub Desktop's installer version can sometimes be different from the actual app version.
          # We'll use the installer's file version for consistency with the package.
          $version = (Get-Item $installerPath).VersionInfo.ProductVersion
          Write-Host "GitHub Desktop installer version: $version"
          echo "GH_DESKTOP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download Microsoft Win32 Content Prep Tool
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/raw/2d0afcf7c1faf9c0f7dbd6db9c90b19f5dfec994/IntuneWinAppUtil.exe" -OutFile "IntuneWinAppUtil.exe"
          if (-not (Test-Path "IntuneWinAppUtil.exe")) {
              Write-Error "IntuneWinAppUtil.exe not downloaded."
              exit 1
          }

      - name: Package GitHub Desktop using IntuneWinAppUtil
        shell: pwsh
        run: |
          $installerFileName = "$env:GH_DESKTOP_INSTALLER_FILENAME"
          $originalOutputPath = ".\output\$($installerFileName -replace '\.exe$', '.intunewin')" # Derive intunewin name from installer
          $finalFileName = "GitHubDesktop-win-x64-$env:GH_DESKTOP_VERSION.intunewin"
          $finalOutputPath = ".\output\$finalFileName"

          # Run the IntuneWinAppUtil to package the application.
          # -c: content folder (.\input)
          # -s: setup file (GitHubDesktopSetup.exe or whatever the downloaded name is)
          # -o: output folder (.\output)
          # -q: quiet mode (no prompts)
          .\IntuneWinAppUtil.exe -c ".\input" -s "$installerFileName" -o ".\output" -q -ErrorAction Stop

          if (-not (Test-Path $originalOutputPath)) {
              Write-Error "Failed to create IntuneWin package at $originalOutputPath."
              exit 1
          }
          
          # Rename the generated .intunewin file for clarity.
          Rename-Item -Path $originalOutputPath -NewName $finalFileName -Force
          Write-Host "Renamed $originalOutputPath to $finalFileName"

          # Set output variable for the final package path
          echo "INTUNEWIN_PACKAGE_PATH=$finalOutputPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Prepare Intune Detection Info for GitHub Desktop
        id: prepare_detection_info
        shell: pwsh
        run: |
          # Get the current workflow's package version (from GH_DESKTOP_VERSION env var)
          $packageVersion = $env:GH_DESKTOP_VERSION

          # GitHub Desktop typically installs per-user into %LOCALAPPDATA%\GitHubDesktop\
          # The detection rule needs to account for this per-user installation path.
          
          # Create a file with the Intune detection information.
          $infoFile = "github_desktop_intune_detection_info.txt"
          @"
          --- GitHub Desktop (Windows) Intune Details ---
          
          App Name: GitHub Desktop (x64)
          Package Version: $packageVersion
          
          # Intune Installation Commands:
          Install Command: GitHubDesktopSetup.exe /S
          # Note: GitHub Desktop's uninstallation is often managed via Squirrel.
          # The uninstall command below attempts to use the Squirrel uninstaller.
          # This command might need testing in your specific environment as Squirrel uninstallers can be tricky.
          Uninstall Command: "%LOCALAPPDATA%\GitHubDesktop\Update.exe" --uninstall
          # Alternative simple uninstall (if Squirrel doesn't work consistently or for cleanup):
          # Uninstall Command: cmd /c "rmdir "%LOCALAPPDATA%\GitHubDesktop" /s /q"
          
          # Intune Detection Rule (REQUIRED for correct status in Company Portal):
          # Rule Type: File
          # Path: %LOCALAPPDATA%\GitHubDesktop\app-$packageVersion
          # File or folder: GitHubDesktop.exe
          # Detection method: Version
          # Operator: Greater than or equal to
          # Value: $packageVersion
          
          # Notes:
          # - GitHub Desktop is commonly installed per-user in %LOCALAPPDATA%.
          #   The detection path '%LOCALAPPDATA%\GitHubDesktop\app-<version>' includes the version.
          # - The 'Value' for the version detection should match the detected package version.
          # - The uninstall command can be tricky for GitHub Desktop's default installer.
          #   The provided command attempts to use Squirrel.exe or remove the app folder.
          ---------------------------------------------
          "@ | Out-File -FilePath $infoFile -Encoding utf8

          Write-Host "Intune detection info saved to $infoFile"
          Get-Item $infoFile | Select-Object Name, Length # Show the created file details

          # Make the info file path available as an output for artifact upload.
          echo "INFO_FILE_PATH=$infoFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload GitHub Desktop IntuneWin package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-desktop-windows-intunewin # Clearer artifact name
          path: ${{ env.INTUNEWIN_PACKAGE_PATH }} # Path to the generated .intunewin file
          retention-days: 7

      - name: Upload Intune detection info file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-desktop-windows-intune-info # Clearer artifact name
          path: ${{ steps.prepare_detection_info.outputs.INFO_FILE_PATH }} # Path to the info text file
          retention-days: 7
