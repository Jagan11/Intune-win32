name: Slack Desktop (Windows) Intune MSIX Package

on:
  workflow_dispatch: # manual trigger

jobs:
  package-slack-msix:
    runs-on: windows-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üìÇ Create working directories
        shell: pwsh
        run: |
          Write-Host "Creating necessary directories..."
          New-Item -ItemType Directory -Path ".\input" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path ".\output" -ErrorAction SilentlyContinue
          Write-Host "Directories created."

      - name: üì• Download Slack MSIX installer
        shell: pwsh
        run: |
          # Replace this with your MSI or MSIX URL accessible to the runner
          $msixUrl = "https://your-secure-storage.example.com/slack-desktop-win64.msix"
          $outputFile = ".\input\slack-desktop-win64.msix"
          Write-Host "Downloading Slack MSIX from $msixUrl to $outputFile..."
          try {
            Invoke-WebRequest -Uri $msixUrl -OutFile $outputFile -MaximumRedirection 5
            if (-not (Test-Path $outputFile)) {
              throw "Downloaded file not found at $outputFile."
            }
            $fileSize = (Get-Item $outputFile).Length
            Write-Host "Installer package size: $fileSize bytes."
            if ($fileSize -lt 10000000) {
              Write-Warning "Warning: Downloaded MSIX package may be unusually small; please verify."
            }
            Write-Host "‚úÖ Slack MSIX installer downloaded successfully."
          } catch {
            Write-Error "‚ùå Failed to download Slack MSIX installer: $($_.Exception.Message)"
            exit 1
          }

      - name: üîé Get Slack MSIX version
        id: get_version
        shell: pwsh
        run: |
          $path = ".\input\slack-desktop-win64.msix"
          if (-not (Test-Path $path)) {
            Write-Error "‚ùå Slack MSIX installer not found for version extraction."
            exit 1
          }
          $fileName = (Get-Item $path).BaseName
          $version = ""
          if ($fileName -match "slack-(\d+\.\d+\.\d+\.\d+)") {
              $version = $Matches[1]
              Write-Host "Detected version from filename: $version"
          } elseif ($fileName -match "(\d+\.\d+\.\d+\.\d+)") {
              $version = $Matches[1]
              Write-Host "Detected version from filename (generic): $version"
          } else {
              Write-Warning "Could not reliably extract version from MSIX filename. Using 'Unknown'."
              $version = "Unknown"
          }
          echo "SLACK_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ Detected Slack MSIX version: $version"

      - name: üì¶ Rename Slack MSIX package
        shell: pwsh
        run: |
          $originalFile = ".\input\slack-desktop-win64.msix"
          $outputFolder = ".\output"
          $slackVersion = $env:SLACK_VERSION
          if (-not (Test-Path $originalFile)) {
              Write-Error "‚ùå Slack MSIX package not found for renaming."
              exit 1
          }
          $newName = "Slack-win-x64-${slackVersion}.msix"
          Rename-Item -Path $originalFile -NewName "$outputFolder\$newName" -Force
          $msixPackagePath = "$outputFolder\$newName"
          Write-Host "‚úÖ Slack MSIX package prepared successfully: $msixPackagePath"
          echo "SLACK_MSIX_PACKAGE_PATH=$msixPackagePath" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: üìù Generate Intune App Details File for MSIX
        id: generate_info
        shell: pwsh
        run: |
          $slackVersion = $env:SLACK_VERSION
          $packageFamilyName = "{YOUR_SLACK_MSIX_PACKAGE_FAMILY_NAME}" # << REPLACE WITH ACTUAL PFN
          $infoFile = "slack_intune_msix_details.txt"
          $content = @"
--- Slack Desktop (Windows) Intune App Details (MSIX) ---
App Type: Line-of-business app (or Microsoft Store app (new) if from Store)
Display Name: Slack
Publisher: Slack Technologies, Inc.
Version: $slackVersion
Install Command: Handled by Intune for MSIX
Uninstall Command: Handled by Intune for MSIX
Detection Rule (MSIX):
  Package Family Name: $packageFamilyName
  Minimum Version: $slackVersion
Minimum OS Version: Windows 10 1709 (MSIX support is generally good from this version)
---------------------------------------------------------
"@
          $content | Out-File -FilePath $infoFile -Encoding UTF8
          Write-Host "‚úÖ Intune MSIX app details saved to $infoFile"
          echo "INFO_FILE_PATH=$infoFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: ‚¨ÜÔ∏è Upload Slack .msix package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Slack-Intune-MSIX-Package
          path: output/*.msix
          retention-days: 7

      - name: ‚¨ÜÔ∏è Upload Intune details file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Slack-Intune-MSIX-Details
          path: slack_intune_msix_details.txt
          retention-days: 7

      - name: üßπ Clean up temporary directories
        if: always()
        shell: pwsh
        run: |
          Write-Host "Cleaning up temporary directories..."
          Remove-Item -Path ".\input", ".\output" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleanup complete."
