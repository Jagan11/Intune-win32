name: Build Slack Package (Windows)

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  slack:
    runs-on: windows-latest # This job runs on a Windows runner

    steps:
      - name: Create directories
        run: |
          New-Item -Path input -ItemType Directory -Force
          New-Item -Path output -ItemType Directory -Force

      - name: Download latest Slack for Windows installer
        shell: pwsh
        run: |
          # This URL from the official Slack website downloads the latest stable 64-bit EXE installer.
          $downloadUrl = "https://slack.com/ssb/download-win64"
          Write-Host "Downloading Slack from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile "input\SlackSetup.exe"

      - name: Get Slack installer version and set as environment variable
        shell: pwsh
        run: |
          $installerPath = "input\SlackSetup.exe"
          if (-not (Test-Path $installerPath)) {
              Write-Error "SlackSetup.exe not found at $installerPath."
              exit 1
          }
          $version = (Get-Item $installerPath).VersionInfo.ProductVersion
          Write-Host "Slack installer version: $version"
          echo "SLACK_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download Microsoft Win32 Content Prep Tool
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/raw/2d0afcf7c1faf9c0f7dbd6db9c90b19f5dfec994/IntuneWinAppUtil.exe" -OutFile "IntuneWinAppUtil.exe"
          if (-not (Test-Path "IntuneWinAppUtil.exe")) {
              Write-Error "IntuneWinAppUtil.exe not downloaded."
              exit 1
          }

      - name: Package Slack using IntuneWinAppUtil
        shell: pwsh
        run: |
          $installerFileName = "SlackSetup.exe"
          $originalOutputPath = ".\output\SlackSetup.intunewin"
          $finalFileName = "Slack-win-x64-$env:SLACK_VERSION.intunewin"
          $finalOutputPath = ".\output\$finalFileName"

          # Run the IntuneWinAppUtil to package the application.
          # -c: content folder (.\input)
          # -s: setup file (SlackSetup.exe)
          # -o: output folder (.\output)
          # -q: quiet mode (no prompts)
          .\IntuneWinAppUtil.exe -c ".\input" -s "$installerFileName" -o ".\output" -q

          if (-not (Test-Path $originalOutputPath)) {
              Write-Error "Failed to create IntuneWin package at $originalOutputPath."
              exit 1
          }
          
          # Rename the generated .intunewin file for clarity.
          Rename-Item -Path $originalOutputPath -NewName $finalFileName -Force
          Write-Host "Renamed $originalOutputPath to $finalOutputPath"

          # Set output variable for the final package path
          echo "INTUNEWIN_PACKAGE_PATH=$finalOutputPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Prepare Intune Detection Info for Slack
        id: prepare_detection_info
        shell: pwsh
        run: |
          # Get the current workflow's package version (from SLACK_VERSION env var)
          $packageVersion = $env:SLACK_VERSION

          # Slack typically installs to the user's AppData\Local folder.
          # The exact path can vary by version or user, but the existence of Slack.exe
          # in the AppData\Local\Slack\app-<version> directory is a common indicator.
          # For system-wide installations (if you've repacked it or used an enterprise installer),
          # it might be in ProgramFiles. For this workflow, we assume the default user-level.
          # A more robust detection for user-level app often checks for a file in the user's profile.
          
          # For Intune Win32 apps, a robust file detection rule:
          # Path: %LOCALAPPDATA%\Slack\
          # File or folder: slack.exe
          # Detection method: Version
          # Operator: Greater than or equal to
          # Value: <version_number_from_package>
          
          # This detection rule works for the common user-level installation.
          # If Slack is installed system-wide via a different method, this path may need adjustment.

          # Create a file with the Intune detection information.
          # This info will be crucial for setting up the app in Intune.
          $infoFile = "slack_intune_detection_info.txt"
          @"
          --- Slack (Windows) Intune Details ---
          
          App Name: Slack (x64)
          Package Version: $packageVersion
          
          # Intune Installation Commands:
          Install Command: SlackSetup.exe /install
          # Note: Slack's uninstaller path is typically dynamic based on the installed version.
          # For a user-level installation, the uninstaller might be found in %LOCALAPPDATA%\Slack\app-<version>\Slack.exe --uninstall
          # A more reliable method for uninstall is to use the AppXUninstall method if it's an AppX package,
          # or rely on MSI uninstall if repackaged as MSI. For the default EXE, it's often a complex path.
          # A common approach for EXE-based uninstalls for user-level apps is to just delete the folder if no MSI entry.
          Uninstall Command: cmd /c "if exist "%LOCALAPPDATA%\Slack\app-$packageVersion\Squirrel.exe" ("%LOCALAPPDATA%\Slack\app-$packageVersion\Squirrel.exe" --uninstall --silent) & rmdir "%LOCALAPPDATA%\Slack\app-$packageVersion" /s /q"
          # Alternative simple uninstall (for user-level installs if Squirrel doesn't work consistently):
          # Uninstall Command: cmd /c "rmdir "%LOCALAPPDATA%\Slack" /s /q"
          
          # Intune Detection Rule (REQUIRED for correct status in Company Portal):
          # Rule Type: File
          # Path: %LOCALAPPDATA%\Slack\app-$packageVersion
          # File or folder: Slack.exe
          # Detection method: Version
          # Operator: Greater than or equal to
          # Value: $packageVersion
          
          # Notes:
          # - Slack is commonly installed per-user in %LOCALAPPDATA%.
          #   The detection path '%LOCALAPPDATA%\Slack\app-<version>' includes the version.
          # - The 'Value' for the version detection should match the detected package version.
          # - The uninstall command can be tricky for Slack's default installer.
          #   The provided command attempts to use Squirrel.exe or remove the app folder.
          --------------------------------------
          "@ | Out-File -FilePath $infoFile -Encoding utf8

          Write-Host "Intune detection info saved to $infoFile"
          Get-Item $infoFile | Select-Object Name, Length # Show the created file details

          # Make the info file path available as an output for artifact upload.
          echo "INFO_FILE_PATH=$infoFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload Slack IntuneWin package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: slack-windows-intunewin # Clearer artifact name
          path: ${{ env.INTUNEWIN_PACKAGE_PATH }} # Path to the generated .intunewin file
          retention-days: 7

      - name: Upload Intune detection info file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: slack-windows-intune-info # Clearer artifact name
          path: ${{ steps.prepare_detection_info.outputs.INFO_FILE_PATH }} # Path to the info text file
          retention-days: 7
