name: Package macOS Apps as DMG/PKG

on:
  workflow_dispatch:

jobs:
  vscode:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output
      - name: Download latest VSCode stable macOS User Installer (DMG)
        run: |
          curl -L "https://update.code.visualstudio.com/latest/darwin/stable" -o input/VSCode.dmg
      - name: Get VSCode version
        run: |
          # Mount DMG temporarily
          hdiutil attach input/VSCode.dmg -mountpoint /Volumes/VSCode
          version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "/Volumes/VSCode/Visual Studio Code.app/Contents/Info.plist")
          echo "VSCODE_VERSION=$version" >> $GITHUB_ENV
          echo "VSCode version: $version"
          hdiutil detach /Volumes/VSCode

  chrome:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: mkdir -p input output
      - name: Download Google Chrome stable macOS DMG
        run: |
          curl -L "https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg" -o input/Chrome.dmg
      - name: Get Chrome version
        run: |
          # Mount DMG
          hdiutil attach input/Chrome.dmg -mountpoint /Volumes/Chrome
          version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "/Volumes/Chrome/Google Chrome.app/Contents/Info.plist")
          echo "CHROME_VERSION=$version" >> $GITHUB_ENV
          echo "Chrome version: $version"
          hdiutil detach /Volumes/Chrome

  edge:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: mkdir -p input output
      - name: Download Microsoft Edge stable macOS PKG
        run: |
          curl -L "https://go.microsoft.com/fwlink/?linkid=2069148&platform=Mac&channel=Stable" -o input/MicrosoftEdge.pkg
      - name: Get Edge version
        run: |
          version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "/Applications/Microsoft Edge.app/Contents/Info.plist" 2>/dev/null || echo "")
          # If Edge.app is not installed yet, extract from pkg
          if [ -z "$version" ]; then
            pkgutil --expand input/MicrosoftEdge.pkg input/expanded_edge
            plist=$(find input/expanded_edge -name "Info.plist" | head -n1)
            version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$plist")
            rm -rf input/expanded_edge
          fi
          echo "EDGE_VERSION=$version" >> $GITHUB_ENV
          echo "Edge version: $version"

  nodejs:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: mkdir -p input output
      - name: Get latest Node.js LTS version and download URL
        run: |
          version=$(curl -s https://nodejs.org/dist/index.json | jq -r '.[] | select(.lts != null) | .version' | head -n1 | sed 's/^v//')
          url="https://nodejs.org/dist/v${version}/node-v${version}.pkg"
          echo "NODEJS_VERSION=$version" >> $GITHUB_ENV
          echo "Downloading Node.js $version from $url"
          curl -L "$url" -o input/Node.pkg
      - name: Get Node.js version from pkg
        run: |
          # Extract Info.plist from pkg
          pkgutil --expand input/Node.pkg input/expanded_node
          plist=$(find input/expanded_node -name "Info.plist" | head -n1)
          version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$plist")
          echo "NODEJS_VERSION=$version" >> $GITHUB_ENV
          echo "Node.js version: $version"
          rm -rf input/expanded_node

  git:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: mkdir -p input output
      - name: Download latest stable Git macOS installer
        run: |
          # This URL redirects to the latest stable Git installer pkg
          curl -L "https://sourceforge.net/projects/git-osx-installer/files/latest/download" -o input/Git.pkg
      - name: Extract Git version from pkg
        run: |
          pkgutil --expand input/Git.pkg input/expanded_git
          plist=$(find input/expanded_git -name "Info.plist" | head -n1)
          version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$plist")
          echo "GIT_VERSION=$version" >> $GITHUB_ENV
          echo "Git version: $version"
          rm -rf input/expanded_git

  # Optional: Upload artifacts step here if needed

