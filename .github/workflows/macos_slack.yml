name: Package Slack macOS .intunemac

on:
  workflow_dispatch:

jobs:
  package-slack:
    runs-on: macos-latest
    steps:
      - name: Create base directories
        run: |
          mkdir -p output
          mkdir -p tools
          mkdir -p temp_app_dir # Directory to hold the extracted .app

      - name: Checkout repository (not strictly needed for IntuneAppUtil anymore, but good practice)
        uses: actions/checkout@v3

      - name: Download Microsoft Shell Intune App Utility
        run: |
          set -eux
          echo "Downloading Microsoft Shell Intune App Utility (IntuneAppUtil) directly..."
          mkdir -p tools # Ensure the 'tools' directory exists right before attempting to download into it
          
          # Corrected URL: changed 'master' to 'main' branch
          # Using relative path for output
          curl -L "https://raw.githubusercontent.com/microsoft/shell-intune-samples/main/macOS/Tools/IntuneAppUtil" -o "tools/IntuneAppUtil"
          
          # Make the downloaded file executable using its relative path
          chmod +x "tools/IntuneAppUtil"
          
          echo "IntuneAppUtil prepared."

      - name: Download latest Slack macOS DMG
        run: |
          set -eux
          set -o pipefail # Ensure any error in a pipeline causes the script to exit immediately
          
          echo "Fetching Slack macOS download page to find the direct DMG link..."
          # Fetch the HTML content of the Slack macOS download page
          DOWNLOAD_PAGE_URL="https://slack.com/downloads/macos"
          HTML_CONTENT=$(curl -sL "$DOWNLOAD_PAGE_URL" -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36")
          
          echo "--- START: HTML Content from Slack Download Page ---"
          echo "$HTML_CONTENT" # Diagnostic: Print the raw HTML content
          echo "--- END: HTML Content from Slack Download Page ---"

          # Parse the HTML to find the .dmg download link.
          # This grep/sed combination looks for lines containing ".dmg" and extracts the URL from href attributes.
          # It assumes the structure includes an anchor tag with an href pointing to the DMG.
          # Added -m 1 to grep to stop after first match for efficiency
          DMG_DOWNLOAD_URL=$(echo "$HTML_CONTENT" | grep -m 1 -oE 'href="[^"]+\.dmg"' | sed 's/href="//;s/"$//')

          if [ -z "$DMG_DOWNLOAD_URL" ]; then
            echo "Error: Could not find a .dmg download URL on the Slack macOS download page."
            exit 1
          fi

          echo "Found DMG download URL: $DMG_DOWNLOAD_URL"
          
          echo "Downloading latest Slack DMG from discovered URL..."
          mkdir -p input # Ensure the 'input' directory exists immediately before download
          
          # Use the extracted URL for the actual download
          curl -L "$DMG_DOWNLOAD_URL" \
            -o "input/Slack-latest.dmg" \
            -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36"
          
          echo "Downloaded Slack DMG to input/Slack-latest.dmg"
          ls -la "input/Slack-latest.dmg" # Diagnostic: Verify file exists and its size
          file "input/Slack-latest.dmg" # Diagnostic: CRITICAL - Check the actual file type
          
          # Diagnostic: If the file is small or not a DMG, print its content
          FILE_SIZE=$(stat -f %z "input/Slack-latest.dmg")
          if [ "$FILE_SIZE" -lt 1000000 ] || ! file "input/Slack-latest.dmg" | grep -q "Apple disk image"; then
              echo "--- START: Content of downloaded Slack-latest.dmg (likely not a valid DMG) ---"
              head -n 20 "input/Slack-latest.dmg" || cat "input/Slack-latest.dmg" # Print first 20 lines or full content if smaller
              echo "--- END: Content of downloaded Slack-latest.dmg ---"
          fi
          
      - name: Extract Slack.app from DMG and get version
        run: |
          set -eux
          set -o pipefail # Ensure any error in a pipeline causes the script to exit immediately
          DMG_PATH="input/Slack-latest.dmg" # Use relative path
          APP_NAME="Slack.app" # Expected name of the application bundle inside the DMG
          
          echo "Attaching DMG for Slack.app extraction..."
          # Attach the DMG, allowing it to be mounted
          MOUNT_OUTPUT=$(hdiutil attach "$DMG_PATH" -nobrowse -noverify)
          echo "hdiutil attach output:"
          echo "$MOUNT_OUTPUT"

          # Extract the mount point, robustly handling spaces in the volume name
          MOUNTPOINT=$(echo "$MOUNT_OUTPUT" | grep '/Volumes/' | head -n 1 | sed -E 's/.*(\/Volumes\/.*)/\1/')
          echo "Mounted DMG at: $MOUNTPOINT"

          if [ -z "$MOUNTPOINT" ]; then
            echo "Error: Could not find mount point for Slack DMG."
            exit 1
          fi

          # Copy the .app bundle to a temporary directory for packaging
          echo "Copying $APP_NAME from DMG to temporary directory..."
          cp -R "$MOUNTPOINT/$APP_NAME" "temp_app_dir/$APP_NAME"
          echo "$APP_NAME copied."

          # Read the CFBundleShortVersionString from the copied Slack.app's Info.plist
          VERSION=$(defaults read "temp_app_dir/$APP_NAME/Contents/Info.plist" CFBundleShortVersionString || echo "unknown")
          echo "SLACK_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Slack version: $VERSION"

          echo "Detaching DMG..."
          hdiutil detach "$MOUNTPOINT" -quiet
          echo "DMG detached."

      - name: Create .intunemac package using IntuneAppUtil
        run: |
          set -eux
          set -o pipefail # Ensure any error in a pipeline causes the script to exit immediately
          # Run the IntuneAppUtil on the extracted Slack.app
          # Output to the 'output' directory with a versioned name
          ./tools/IntuneAppUtil -c "temp_app_dir" -o "output" -n "Slack-macOS-$SLACK_VERSION.intunemac"
          echo "Slack-macOS-$SLACK_VERSION.intunemac created."

      - name: Upload .intunemac artifact
        uses: actions/upload-artifact@v4
        with:
          name: slack-macos-intunemac
          path: output/*.intunemac
          retention-days: 7
