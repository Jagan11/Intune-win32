name: Download and Extract Slack.app

on:
  workflow_dispatch:

jobs:
  download-slack:
    runs-on: macos-latest

    steps:
      - name: Create output directory
        run: mkdir -p output

      - name: Download Slack DMG
        run: |
          SLACK_URL="https://downloads.slack-edge.com/releases/macos/Slack-latest.dmg"
          echo "Downloading Slack from $SLACK_URL"
          curl -L "$SLACK_URL" -o output/Slack.dmg
          if [ ! -s output/Slack.dmg ]; then
            echo "Slack DMG download failed or empty!"
            exit 1
          fi

      - name: Mount Slack DMG
        id: mount
        run: |
          echo "Mounting Slack DMG..."
          # Attach the DMG and capture the mount point.
          # -nobrowse prevents it from appearing in Finder sidebar.
          # -quiet suppresses verbose output.
          # Use awk '{print $NF}' to get the last field on the line containing '/Volumes/', which is typically the mount point.
          MOUNT_DIR=$(hdiutil attach output/Slack.dmg -nobrowse -quiet 2>&1 | grep '/Volumes/' | awk '{print $NF}')
          if [ -z "$MOUNT_DIR" ]; then
            echo "Error: Could not determine DMG mount directory."
            # For debugging, print the full output of hdiutil attach if MOUNT_DIR is empty.
            echo "hdiutil attach output:"
            hdiutil attach output/Slack.dmg -nobrowse -quiet 2>&1
            exit 1
          fi
          echo "MOUNT_DIR=$MOUNT_DIR" >> $GITHUB_OUTPUT
          echo "Mounted at $MOUNT_DIR"

      - name: Copy Slack.app to output directory
        run: |
          echo "Copying Slack.app from mounted volume..."
          # Find the Slack.app bundle within the mounted directory.
          # Using -maxdepth 2 to look directly in the root or one level deep in case of subfolders.
          SLACK_APP_SOURCE=$(find "${{ steps.mount.outputs.MOUNT_DIR }}" -name "Slack.app" -type d -maxdepth 2 | head -n 1)

          if [ -z "$SLACK_APP_SOURCE" ]; then
            echo "Error: Slack.app not found in mounted DMG at ${{ steps.mount.outputs.MOUNT_DIR }}."
            # List contents of mounted directory for debugging
            echo "Contents of mounted directory:"
            ls -al "${{ steps.mount.outputs.MOUNT_DIR }}"
            exit 1
          fi

          # Copy the found Slack.app to the output directory
          cp -R "$SLACK_APP_SOURCE" output/
          echo "Copied $SLACK_APP_SOURCE to output/Slack.app"
          ls -l output/Slack.app

      - name: Unmount Slack DMG
        if: always() # Ensure this step runs even if previous steps fail
        run: |
          echo "Unmounting Slack DMG..."
          # Detach the DMG using the captured mount directory.
          # -quiet suppresses verbose output.
          # The MOUNT_DIR should be wrapped in quotes to handle spaces in path names.
          hdiutil detach "${{ steps.mount.outputs.MOUNT_DIR }}" -quiet || true # '|| true' ensures step doesn't fail the workflow if detach fails
