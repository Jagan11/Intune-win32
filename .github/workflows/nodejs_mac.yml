name: Get Node.js PKG for Intune with Bundle Info

on:
  workflow_dispatch:

jobs:
  nodejs-pkg:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output

      - name: Get latest Node.js LTS version and download URL
        run: |
          set -eux
          NODE_INDEX=$(curl -s "https://nodejs.org/dist/index.json")
          echo "$NODE_INDEX" | head -n 20

          LTS_VERSION_FULL=$(echo "$NODE_INDEX" | jq -r '.[] | select(.lts) | .version' | sort -V | tail -n 1)
          if [ -z "$LTS_VERSION_FULL" ]; then
            echo "Error: Could not determine latest LTS Node.js version."
            exit 1
          fi
          LTS_VERSION_CLEAN=${LTS_VERSION_FULL//v/}

          INSTALLER_FILENAME="node-${LTS_VERSION_FULL}-darwin-x64.pkg"
          DOWNLOAD_URL="https://nodejs.org/dist/${LTS_VERSION_FULL}/${INSTALLER_FILENAME}"

          echo "NODEJS_VERSION=$LTS_VERSION_FULL" >> $GITHUB_ENV
          echo "NODEJS_DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "NODEJS_INSTALLER_FILENAME=$INSTALLER_FILENAME" >> $GITHUB_ENV

          echo "Found Node.js LTS version: $LTS_VERSION_FULL"
          echo "Download URL: $DOWNLOAD_URL"
          echo "Installer filename: $INSTALLER_FILENAME"

      - name: Download Node.js PKG
        run: |
          set -eux
          curl -L "$NODEJS_DOWNLOAD_URL" -o "output/$NODEJS_INSTALLER_FILENAME"
          echo "Downloaded Node.js PKG to output/$NODEJS_INSTALLER_FILENAME"

          FILE_SIZE_BYTES=$(stat -f%z "output/$NODEJS_INSTALLER_FILENAME")
          MIN_EXPECTED_SIZE_BYTES=10000000
          if [ "$FILE_SIZE_BYTES" -lt "$MIN_EXPECTED_SIZE_BYTES" ]; then
            echo "Error: Downloaded PKG file too small ($FILE_SIZE_BYTES bytes)."
            exit 1
          else
            echo "Downloaded PKG size: $FILE_SIZE_BYTES bytes"
          fi

      - name: Extract Node.js bundle ID and version from PKG metadata
        run: |
          set -eux
          PKG_PATH="output/$NODEJS_INSTALLER_FILENAME"

          # Extract Distribution XML content (if exists) from pkg
          pkgutil --expand-full "$PKG_PATH" pkg-expanded

          # Distribution file is at pkg-expanded/Distribution or in pkg-expanded/*.pkg/Distribution
          # Check for top-level Distribution file
          if [ -f pkg-expanded/Distribution ]; then
            DIST_FILE="pkg-expanded/Distribution"
          else
            # Find first Distribution inside nested packages
            DIST_FILE=$(find pkg-expanded -name Distribution | head -n1)
          fi

          if [ -z "$DIST_FILE" ]; then
            echo "Distribution file not found, cannot extract bundle info."
            echo "NODE_BUNDLE_ID=unknown" >> $GITHUB_ENV
            echo "NODE_PKG_VERSION=unknown" >> $GITHUB_ENV
            exit 0
          fi

          echo "Found Distribution file at: $DIST_FILE"

          # Extract version from Distribution XML (look for version attribute or pkg-ref)
          NODE_PKG_VERSION=$(xmllint --xpath "string(/installer-script/@version)" "$DIST_FILE" || echo "")
          if [ -z "$NODE_PKG_VERSION" ]; then
            # fallback: try pkg-ref version attribute
            NODE_PKG_VERSION=$(xmllint --xpath "string(/installer-script/pkg-ref/@version)" "$DIST_FILE" || echo "unknown")
          fi
          NODE_PKG_VERSION=${NODE_PKG_VERSION:-unknown}

          # Hardcode or try to detect bundle ID (Node.js CLI usually org.nodejs.node)
          NODE_BUNDLE_ID="org.nodejs.node"

          echo "NODE_BUNDLE_ID=$NODE_BUNDLE_ID" >> $GITHUB_ENV
          echo "NODE_PKG_VERSION=$NODE_PKG_VERSION" >> $GITHUB_ENV

          echo "Node.js bundle ID: $NODE_BUNDLE_ID"
          echo "Node.js PKG version: $NODE_PKG_VERSION"

          # Cleanup
          rm -rf pkg-expanded

      - name: Upload Node.js PKG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-pkg
          path: output/*.pkg
