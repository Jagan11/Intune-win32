name: Extract Edge PKG Bundle ID

on:
  workflow_dispatch:

jobs:
  extract-bundle-id:
    runs-on: macos-latest

    steps:
    - name: Create output directory
      run: mkdir -p output

    - name: Download Microsoft Edge PKG
      run: |
        # Use a direct link to the universal macOS PKG installer for Microsoft Edge Stable.
        # This link typically redirects to the latest stable universal installer.
        EDGE_URL="https://go.microsoft.com/fwlink/?linkid=2093504"
        echo "Downloading Microsoft Edge PKG from: $EDGE_URL"
        # The -L flag handles redirects, which is important for this fwlink.
        curl -L $EDGE_URL -o output/MicrosoftEdgeStable.pkg
        # Verify download
        if [ ! -f output/MicrosoftEdgeStable.pkg ] || [ ! -s output/MicrosoftEdgeStable.pkg ]; then
          echo "Error: Downloaded PKG file is missing or empty."
          exit 1
        fi

    - name: Expand PKG and extract bundle identifier
      run: |
        # Clean up any previous expansion directory to prevent "File exists" errors
        rm -rf expanded_pkg
        
        # Expand the downloaded .pkg file. pkgutil will create 'expanded_pkg' itself.
        pkgutil --expand output/MicrosoftEdgeStable.pkg expanded_pkg

        APP_FULL_PATH="" # Will store the absolute path to the .app bundle

        # Find the Payload file within any subdirectory of expanded_pkg
        # Microsoft Edge PKG is a distribution package, so Payload is nested inside a component package directory.
        PAYLOAD_FILE_PATH=$(find expanded_pkg -name "Payload" -type f | head -n 1)

        if [ -n "$PAYLOAD_FILE_PATH" ]; then
          echo "Found Payload file at: $PAYLOAD_FILE_PATH"
          
          # Get the directory where the Payload file is located
          PAYLOAD_DIR=$(dirname "$PAYLOAD_FILE_PATH")
          
          # Create a temporary directory for extraction *inside* the Payload's directory
          TEMP_EXTRACT_DIR="$PAYLOAD_DIR/payload_contents"
          rm -rf "$TEMP_EXTRACT_DIR" # Clean up previous temp extraction
          mkdir -p "$TEMP_EXTRACT_DIR"
          
          # Navigate into the temporary extraction directory and then extract the Payload
          (cd "$TEMP_EXTRACT_DIR" && cat "$PAYLOAD_FILE_PATH" | gzip -d | cpio -idmv)
          
          # Find the .app directory within the extracted contents (now relative to TEMP_EXTRACT_DIR)
          TEMP_APP_PATH=$(find "$TEMP_EXTRACT_DIR" -name "*.app" -type d -maxdepth 1 | head -n 1)
          
          if [ -n "$TEMP_APP_PATH" ]; then
              APP_FULL_PATH="$TEMP_APP_PATH" # This will be the absolute path
          fi
        fi

        # Fallback: If no Payload or app wasn't found via Payload, search for .app directly within expanded_pkg or its subdirectories
        # This covers cases where the .app might be directly accessible after initial pkgutil expand (less common for Edge)
        if [ -z "$APP_FULL_PATH" ]; then
          echo "No Payload found or app not extracted from Payload. Searching for .app directly in expanded structure."
          APP_FULL_PATH=$(find expanded_pkg -name "*.app" -type d | head -n 1)
        fi

        # Final check for APP_FULL_PATH
        if [ -z "$APP_FULL_PATH" ]; then
          echo "Error: No .app bundle found anywhere in the expanded package structure."
          exit 1
        fi

        echo "Found app at: $APP_FULL_PATH"
        echo "Bundle ID:"
        # Use PlistBuddy to extract the CFBundleIdentifier from the app's Info.plist
        /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$APP_FULL_PATH/Contents/Info.plist"
