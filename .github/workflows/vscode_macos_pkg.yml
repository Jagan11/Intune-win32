name: Get macOS App DMGs for Intune

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  vscode-dmg:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output
      - name: Download latest VSCode macOS Universal (ZIP)
        run: |
          curl -L "https://update.code.visualstudio.com/latest/darwin-universal/stable" -o "input/VSCode.zip"
      - name: Unzip VSCode and set app path
        run: |
          unzip -q input/VSCode.zip -d input/
          VSCODE_APP_FULL_PATH=$(find input -maxdepth 2 -name "Visual Studio Code.app" -type d | head -n 1)
          if [ -z "$VSCODE_APP_FULL_PATH" ]; then
            echo "Error: Visual Studio Code.app not found after unzipping."
            exit 1
          fi
          echo "VSCODE_APP_FULL_PATH=$VSCODE_APP_FULL_PATH" >> $GITHUB_ENV
      - name: Get VSCode version
        run: |
          VERSION=$(defaults read "$VSCODE_APP_FULL_PATH/Contents/Info.plist" CFBundleShortVersionString || echo "unknown")
          echo "VSCODE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "VSCode version: $VERSION"
      - name: Create VSCode DMG from app bundle
        run: |
          set -eux
          TEMP_DMG_PATH="output/VSCode-temp.dmg"
          VOL_NAME="Visual Studio Code"

          echo "Creating DMG at $TEMP_DMG_PATH"
          # Increased size to 2000m (2GB)
          hdiutil create -size 2000m -fs HFS+ -volname "$VOL_NAME" -ov -quiet -o "$TEMP_DMG_PATH"

          echo "Attaching DMG..."
          MOUNT_OUTPUT=$(hdiutil attach "$TEMP_DMG_PATH" -nobrowse -noverify)
          echo "hdiutil attach output:"
          echo "$MOUNT_OUTPUT"

          MOUNTPOINT=$(echo "$MOUNT_OUTPUT" | grep '/Volumes/' | sed -E 's/.*(\/Volumes\/.*)/\1/')
          echo "Mounted DMG at: $MOUNTPOINT"

          if [ -z "$MOUNTPOINT" ]; then
            echo "Error: Could not find mount point."
            exit 1
          fi

          echo "Copying app to DMG..."
          cp -R "$VSCODE_APP_FULL_PATH" "$MOUNTPOINT/"

          echo "Detaching DMG..."
          hdiutil detach "$MOUNTPOINT" -quiet

          FINAL_DMG="output/VSCode-macOS-universal-$VSCODE_VERSION.dmg"
          echo "Renaming DMG to $FINAL_DMG"
          mv "$TEMP_DMG_PATH" "$FINAL_DMG"

          echo "Created DMG: $FINAL_DMG"
      - name: Upload VSCode DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-dmg
          path: output/*.dmg

---

  github-desktop-dmg:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output
      - name: Download latest GitHub Desktop macOS Universal (ZIP)
        run: |
          curl -L "https://central.github.com/deployments/desktop/desktop/latest/darwin" -o "input/GitHubDesktop.zip"
      - name: Unzip GitHub Desktop and set app path
        run: |
          unzip -q input/GitHubDesktop.zip -d input/
          GITHUB_APP_FULL_PATH=$(find input -maxdepth 2 -name "GitHub Desktop.app" -type d | head -n 1)
          if [ -z "$GITHUB_APP_FULL_PATH" ]; then
            echo "Error: GitHub Desktop.app not found in the unzipped directory."
            exit 1
          fi
          echo "GITHUB_APP_FULL_PATH=$GITHUB_APP_FULL_PATH" >> $GITHUB_ENV
      - name: Get GitHub Desktop version
        run: |
          VERSION=$(defaults read "$GITHUB_APP_FULL_PATH/Contents/Info.plist" CFBundleShortVersionString || echo "unknown")
          echo "GHDESKTOP_VERSION=$VERSION" | tee -a $GITHUB_ENV
          echo "GitHub Desktop version: $VERSION"
      - name: Create GitHub Desktop DMG from app bundle
        run: |
          set -eux
          TEMP_DMG_PATH="output/GitHubDesktop-temp.dmg"
          VOL_NAME="GitHub Desktop"

          echo "Creating DMG at $TEMP_DMG_PATH"
          # Increased size to 2000m (2GB)
          hdiutil create -size 2000m -fs HFS+ -volname "$VOL_NAME" -ov -quiet -o "$TEMP_DMG_PATH"

          echo "Attaching DMG..."
          MOUNT_OUTPUT=$(hdiutil attach "$TEMP_DMG_PATH" -nobrowse -noverify)
          echo "hdiutil attach output:"
          echo "$MOUNT_OUTPUT"

          MOUNTPOINT=$(echo "$MOUNT_OUTPUT" | grep '/Volumes/' | sed -E 's/.*(\/Volumes\/.*)/\1/')
          echo "Mounted DMG at: $MOUNTPOINT"

          if [ -z "$MOUNTPOINT" ]; then
            echo "Error: Could not find mount point."
            exit 1
          fi

          echo "Copying app to DMG..."
          cp -R "$GITHUB_APP_FULL_PATH" "$MOUNTPOINT/"

          echo "Detaching DMG..."
          hdiutil detach "$MOUNTPOINT" -quiet

          FINAL_DMG="output/GitHubDesktop-macOS-universal-$GHDESKTOP_VERSION.dmg"
          echo "Renaming DMG to $FINAL_DMG"
          mv "$TEMP_DMG_PATH" "$FINAL_DMG"

          echo "Created DMG: output/GitHubDesktop-macOS-universal-$GHDESKTOP_VERSION.dmg"
      - name: Upload GitHub Desktop DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-desktop-dmg
          path: output/*.dmg

---

  chrome-dmg:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output
      - name: Download latest Google Chrome macOS Universal (DMG)
        run: |
          curl -L "https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg" -o "output/GoogleChrome-macOS-universal.dmg"
      - name: Get Chrome version
        run: |
          set -eux
          DMG_PATH="output/GoogleChrome-macOS-universal.dmg"
          VOL_NAME="Google Chrome"

          echo "Attaching DMG for version check..."
          MOUNT_OUTPUT=$(hdiutil attach "$DMG_PATH" -nobrowse -noverify)
          echo "hdiutil attach output:"
          echo "$MOUNT_OUTPUT"

          MOUNTPOINT=$(echo "$MOUNT_OUTPUT" | grep '/Volumes/' | sed -E 's/.*(\/Volumes\/.*)/\1/')
          echo "Mounted DMG at: $MOUNTPOINT"

          if [ -z "$MOUNTPOINT" ]; then
            echo "Error: Could not find mount point for Chrome DMG."
            exit 1
          fi

          VERSION=$(defaults read "$MOUNTPOINT/Google Chrome.app/Contents/Info.plist" CFBundleShortVersionString || echo "unknown")
          echo "CHROME_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Chrome version: $VERSION"

          echo "Detaching DMG..."
          hdiutil detach "$MOUNTPOINT" -quiet
      - name: Rename Chrome DMG with version
        run: |
          mv "output/GoogleChrome-macOS-universal.dmg" "output/GoogleChrome-macOS-universal-$CHROME_VERSION.dmg"
          echo "Renamed DMG: output/GoogleChrome-macOS-universal-$CHROME_VERSION.dmg"
      - name: Upload Chrome DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-dmg
          path: output/*.dmg

---

  edge-dmg:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output tmp
      - name: Download Microsoft Edge macOS Universal (PKG)
        run: |
          curl -L "https://go.microsoft.com/fwlink/?linkid=2069148" -o "input/MicrosoftEdge.pkg"
      - name: Extract Microsoft Edge.app from PKG
        run: |
          set -eux
          pkgutil --expand "input/MicrosoftEdge.pkg" tmp/expanded_pkg
          cd tmp/expanded_pkg
          
          if [ -f "Payload" ]; then
            tar -xf Payload -C ../ 
            mv ../Applications/Microsoft\ Edge.app ../../input/ 
          else
            mv Applications/Microsoft\ Edge.app ../../input/ 
          fi
          
          cd ../../ 
          rm -rf tmp/ 
          
          echo "EDGE_APP_FULL_PATH=input/Microsoft Edge.app" | tee -a $GITHUB_ENV
      - name: Get Edge version
        run: |
          VERSION=$(defaults read "input/Microsoft Edge.app/Contents/Info.plist" CFBundleShortVersionString || echo "unknown")
          echo "EDGE_VERSION=$VERSION" | tee -a $GITHUB_ENV
          echo "Microsoft Edge version: $VERSION"
      - name: Create Microsoft Edge DMG from app bundle
        run: |
          set -eux
          TEMP_DMG_PATH="output/MicrosoftEdge-temp.dmg"
          VOL_NAME="Microsoft Edge"

          echo "Creating DMG at $TEMP_DMG_PATH"
          # Increased size to 2000m (2GB)
          hdiutil create -size 2000m -fs HFS+ -volname "$VOL_NAME" -ov -quiet -o "$TEMP_DMG_PATH"

          echo "Attaching DMG..."
          MOUNT_OUTPUT=$(hdiutil attach "$TEMP_DMG_PATH" -nobrowse -noverify)
          echo "hdiutil attach output:"
          echo "$MOUNT_OUTPUT"

          MOUNTPOINT=$(echo "$MOUNT_OUTPUT" | grep '/Volumes/' | sed -E 's/.*(\/Volumes\/.*)/\1/')
          echo "Mounted DMG at: $MOUNTPOINT"

          if [ -z "$MOUNTPOINT" ]; then
            echo "Error: Could not find mount point."
            exit 1
          fi

          echo "Copying app to DMG..."
          cp -R "input/Microsoft Edge.app" "$MOUNTPOINT/"

          echo "Detaching DMG..."
          hdiutil detach "$MOUNTPOINT" -quiet

          FINAL_DMG="output/MicrosoftEdge-macOS-universal-$EDGE_VERSION.dmg"
          echo "Renaming DMG to $FINAL_DMG"
          mv "$TEMP_DMG_PATH" "$FINAL_DMG"

          echo "Created DMG: $FINAL_DMG"
      - name: Upload Microsoft Edge DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: edge-dmg
          path: output/*.dmg

---

  nodejs-pkg:
    runs-on: macos-latest
    steps:
      - name: Create directories
        run: |
          mkdir -p input output
      - name: Get latest Node.js LTS version and download URL
        run: |
          NODE_INDEX=$(curl -s "https://nodejs.org/dist/index.json")
          LTS_VERSION=$(echo "$NODE_INDEX" | jq -r '.[].version' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -V | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
          
          if [ -z "$LTS_VERSION" ]; then
            echo "Error: Could not determine latest LTS Node.js version."
            exit 1
          fi

          DOWNLOAD_URL="https://nodejs.org/dist/$LTS_VERSION/node-$LTS_VERSION-darwin-x64.pkg"
          INSTALLER_FILENAME="node-$LTS_VERSION-darwin-x64.pkg"
          
          echo "NODEJS_VERSION=$LTS_VERSION" >> $GITHUB_ENV
          echo "NODEJS_DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "NODEJS_INSTALLER_FILENAME=$INSTALLER_FILENAME" >> $GITHUB_ENV

          echo "Found Node.js LTS version: $LTS_VERSION"
          echo "Download URL: $DOWNLOAD_URL"
          echo "Installer filename: $INSTALLER_FILENAME"

      - name: Download Node.js PKG
        run: |
          curl -L "$NODEJS_DOWNLOAD_URL" -o "output/$NODEJS_INSTALLER_FILENAME"
          echo "Downloaded Node.js PKG: output/$NODEJS_INSTALLER_FILENAME"

      - name: Upload Node.js PKG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-pkg
          path: output/*.pkg
